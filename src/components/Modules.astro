---
import Card from "./Card.astro";
import crmIcon from "../assets/images/crm-icon.png";
import salesIcon from "../assets/images/sales-icon.png";
import inventoryIcon from "../assets/images/inventory-icon.png";
import accountingIcon from "../assets/images/accounting-icon.png";
import manufacturingIcon from "../assets/images/manufacturing-icon.png";
import posIcon from "../assets/images/pos-icon.png";
import purchaseIcon from "../assets/images/purchase-icon.png";
import employeesIcon from "../assets/images/employees-icon.png";
---

<style>
  .slides-wrapper {
    height: 100%;
    width: 100%;
    position: relative;
    display: flex;
    align-items: flex-start;
    overflow: hidden;
  }

  .slide-box {
    box-sizing: border-box;
    display: flex;
    align-items: flex-start;
    margin: 0;
    padding: 0;
    position: relative;
    flex-shrink: 0;
    color: black;
    cursor: pointer;
  }
</style>
<div class="bg-[#002C4B] pb-[8rem]">
  <div class="pt-[8rem] pb-[3rem] px-[5rem]">
    <h1 class="text-[#F3F6FA] text-5xl mb-5">Simplify your business</h1>
    <h2 class="text-customSubheadingColor max-w-xl text-4xl mb-6">
      Discover a suite of modules catering to every aspect of your operations
    </h2>
  </div>
  <div class="slides-wrapper">
    <Card
      title="Sales"
      description="Close deals faster, create professional quotations, and manage your sales pipeline effortlessly."
      img={salesIcon}
    />

    <Card
      title="CRM"
      description="Manage your customer relationships, track leads, and automate your sales pipeline."
      img={crmIcon}
    />

    <Card
      title="Inventory"
      description="Streamline inventory management, optimize stock levels, and track products across multiple locations with ease."
      img={inventoryIcon}
    />

    <Card
      title="Accounting"
      description="Simplify financial management, automate invoicing, and gain real-time insights into your company's financial health."
      img={accountingIcon}
    />

    <Card
      title="Manufacturing"
      description="Plan, schedule, and manage your manufacturing processes efficiently, optimizing production resources."
      img={manufacturingIcon}
    />

    <Card
      title="Point of Sale"
      description="Run your retail operations smoothly, manage sales, inventory, and customer data from one interface."
      img={posIcon}
    />

    <Card
      title="Purchase"
      description="Streamline procurement processes, manage suppliers, and make smarter purchasing decisions."
      img={purchaseIcon}
    />

    <Card
      title="Employees"
      description="Manage employee information, streamline HR processes, and track attendance and leaves seamlessly."
      img={employeesIcon}
    />
  </div>
</div>
<script is:inline src="https://unpkg.co/gsap@3/dist/gsap.min.js"></script>
<script is:inline src="https://unpkg.com/gsap@3/dist/Draggable.min.js"></script>
<script>
  const wrapper = document.querySelector(".slides-wrapper");
  const boxes = gsap.utils.toArray(".slide-box");
  console.clear();

  let activeElement;

  window.addEventListener("load", () => {
    const loop = horizontalLoop(boxes, {
      paused: false,
      draggable: true, // make it draggable
      center: false, // active element is the one in the center of the container rather than th left edge
      onChange: (element, index) => {
        // when the active element changes, this function gets called.
        activeElement && activeElement.classList.remove("-active");
        element.classList.add("-active");
        activeElement = element;
      },
    });
    // Pause animation on mouse enter
    wrapper.addEventListener("mouseenter", () => {
      loop.pause();
    });

    // Resume animation on mouse leave (optional)
    wrapper.addEventListener("mouseleave", () => {
      loop.play();
    });
  });

  function horizontalLoop(items, config) {
    items = gsap.utils.toArray(items);
    config = config || {};
    let onChange = config.onChange,
      lastIndex = 0,
      tl = gsap.timeline({
        repeat: config.repeat,
        onUpdate:
          onChange &&
          function () {
            let i = tl.closestIndex();
            if (lastIndex !== i) {
              lastIndex = i;
              onChange(items[i], i);
            }
          },
        paused: config.paused,
        defaults: { ease: "none" },
        onReverseComplete: () =>
          tl.totalTime(tl.rawTime() + tl.duration() * 10),
      }),
      length = items.length,
      startX = items[0].offsetLeft,
      times = [],
      widths = [],
      spaceBefore = [],
      xPercents = [],
      curIndex = 0,
      center = config.center,
      pixelsPerSecond = (config.speed || 1) * 10,
      snap =
        config.snap === false ? (v) => v : gsap.utils.snap(config.snap || 1), // some browsers shift by a pixel to accommodate flex layouts, so for example if width is 20% the first element's width might be 242px, and the next 243px, alternating back and forth. So we snap to 5 percentage points to make things look more natural
      timeOffset = 0,
      container =
        center === true
          ? items[0].parentNode
          : gsap.utils.toArray(center)[0] || items[0].parentNode,
      totalWidth,
      getTotalWidth = () =>
        items[length - 1].offsetLeft +
        (xPercents[length - 1] / 100) * widths[length - 1] -
        startX +
        spaceBefore[0] +
        items[length - 1].offsetWidth *
          gsap.getProperty(items[length - 1], "scaleX") +
        (parseFloat(config.paddingRight) || 0),
      populateWidths = () => {
        let b1 = container.getBoundingClientRect(),
          b2;
        items.forEach((el, i) => {
          widths[i] = parseFloat(gsap.getProperty(el, "width", "px"));
          xPercents[i] = snap(
            (parseFloat(gsap.getProperty(el, "x", "px")) / widths[i]) * 100 +
              gsap.getProperty(el, "xPercent")
          );
          b2 = el.getBoundingClientRect();
          spaceBefore[i] = b2.left - (i ? b1.right : b1.left);
          b1 = b2;
        });
        gsap.set(items, {
          // convert "x" to "xPercent" to make things responsive, and populate the widths/xPercents Arrays to make lookups faster.
          xPercent: (i) => xPercents[i],
        });
        totalWidth = getTotalWidth();
      },
      timeWrap,
      populateOffsets = () => {
        timeOffset = center
          ? (tl.duration() * (container.offsetWidth / 2)) / totalWidth
          : 0;
        center &&
          times.forEach((t, i) => {
            times[i] = timeWrap(
              tl.labels["label" + i] +
                (tl.duration() * widths[i]) / 2 / totalWidth -
                timeOffset
            );
          });
      },
      getClosest = (values, value, wrap) => {
        let i = values.length,
          closest = 1e10,
          index = 0,
          d;
        while (i--) {
          d = Math.abs(values[i] - value);
          if (d > wrap / 2) {
            d = wrap - d;
          }
          if (d < closest) {
            closest = d;
            index = i;
          }
        }
        return index;
      },
      populateTimeline = () => {
        let i, item, curX, distanceToStart, distanceToLoop;
        tl.clear();
        for (i = 0; i < length; i++) {
          item = items[i];
          curX = (xPercents[i] / 100) * widths[i];
          distanceToStart = item.offsetLeft + curX - startX + spaceBefore[0];
          distanceToLoop =
            distanceToStart + widths[i] * gsap.getProperty(item, "scaleX");
          tl.to(
            item,
            {
              xPercent: snap(((curX - distanceToLoop) / widths[i]) * 100),
              duration: distanceToLoop / pixelsPerSecond,
            },
            0
          )
            .fromTo(
              item,
              {
                xPercent: snap(
                  ((curX - distanceToLoop + totalWidth) / widths[i]) * 100
                ),
              },
              {
                xPercent: xPercents[i],
                duration:
                  (curX - distanceToLoop + totalWidth - curX) / pixelsPerSecond,
                immediateRender: false,
              },
              distanceToLoop / pixelsPerSecond
            )
            .add("label" + i, distanceToStart / pixelsPerSecond);
          times[i] = distanceToStart / pixelsPerSecond;
        }
        timeWrap = gsap.utils.wrap(0, tl.duration());
      },
      refresh = (deep) => {
        let progress = tl.progress();
        tl.progress(0, true);
        populateWidths();
        deep && populateTimeline();
        populateOffsets();
        deep && tl.draggable
          ? tl.time(times[curIndex], true)
          : tl.progress(progress, true);
      },
      proxy;
    gsap.set(items, { x: 0 });
    populateWidths();
    populateTimeline();
    populateOffsets();
    window.addEventListener("resize", () => refresh(true));
    function toIndex(index, vars) {
      vars = vars || {};
      Math.abs(index - curIndex) > length / 2 &&
        (index += index > curIndex ? -length : length); // always go in the shortest direction
      let newIndex = gsap.utils.wrap(0, length, index),
        time = times[newIndex];
      if (time > tl.time() !== index > curIndex) {
        // if we're wrapping the timeline's playhead, make the proper adjustments
        time += tl.duration() * (index > curIndex ? 1 : -1);
      }
      if (time < 0 || time > tl.duration()) {
        vars.modifiers = { time: timeWrap };
      }
      curIndex = newIndex;
      vars.overwrite = true;
      gsap.killTweensOf(proxy);
      return tl.tweenTo(time, vars);
    }
    tl.next = (vars) => toIndex(curIndex + 1, vars);
    tl.previous = (vars) => toIndex(curIndex - 1, vars);
    tl.current = () => curIndex;
    tl.toIndex = (index, vars) => toIndex(index, vars);
    tl.closestIndex = (setCurrent) => {
      let index = getClosest(times, tl.time(), tl.duration());
      setCurrent && (curIndex = index);
      return index;
    };
    tl.times = times;
    tl.progress(1, true).progress(0, true); // pre-render for performance
    if (config.reversed) {
      tl.vars.onReverseComplete();
      tl.reverse();
    }
    if (config.draggable && typeof Draggable === "function") {
      proxy = document.createElement("div");
      let wrap = gsap.utils.wrap(0, 1),
        ratio,
        startProgress,
        draggable,
        dragSnap,
        align = () =>
          tl.progress(
            wrap(startProgress + (draggable.startX - draggable.x) * ratio)
          ),
        syncIndex = () => tl.closestIndex(true);
      typeof InertiaPlugin === "undefined" &&
        console.warn(
          "InertiaPlugin required for momentum-based scrolling and snapping. https://greensock.com/club"
        );
      draggable = Draggable.create(proxy, {
        trigger: items[0].parentNode,
        type: "x",
        onPressInit() {
          gsap.killTweensOf(tl);
          startProgress = tl.progress();
          refresh();
          ratio = 1 / totalWidth;
          gsap.set(proxy, { x: startProgress / -ratio });
        },
        onDrag: align,
        onThrowUpdate: align,
        inertia: true,
        snap: (value) => {
          let time = -(value * ratio) * tl.duration(),
            wrappedTime = timeWrap(time),
            snapTime = times[getClosest(times, wrappedTime, tl.duration())],
            dif = snapTime - wrappedTime;
          Math.abs(dif) > tl.duration() / 2 &&
            (dif += dif < 0 ? tl.duration() : -tl.duration());
          return (time + dif) / tl.duration() / -ratio;
        },
        onRelease: syncIndex,
        onThrowComplete: syncIndex,
      })[0];
      tl.draggable = draggable;
    }
    tl.closestIndex(true);
    onChange && onChange(items[curIndex], curIndex);
    return tl;
  }
</script>
